{"version":3,"sources":["RestaurantCard/index.js","RestaurantList/index.js","App.js","serviceWorker.js","index.js"],"names":["RestaurantCard","props","Box","Typography","variant","gutterBottom","data","name","rating","RestaurantList","sortByKey","array","key","sort","a","b","x","y","useState","restaurants","list","setList","useEffect","console","log","Button","label","onClick","arr","length","map","el","id","AppBar","tag","direction","align","justify","background","pad","vertical","horizontal","elevation","App","setRestaurants","proxyUrl","targetUrl","axios","res","fetchData","Grommet","theme","global","font","family","size","height","component","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAmBeA,EAbQ,SAACC,GACvB,OAEC,kBAACC,EAAA,EAAD,KAEG,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,cAAY,GACtCJ,EAAMK,KAAKC,MAEb,2BAAIN,EAAMK,KAAKE,UCgDLC,EAzDQ,SAACR,GAEvB,IAAMS,EAAY,SAACC,EAAOC,GACtB,OAAOD,EAAME,MAAK,SAASC,EAAGC,GAC1B,IAAMC,EAAIF,EAAEF,GAAYK,EAAIF,EAAEH,GAC9B,OAASI,EAAIC,GAAM,EAAMD,EAAIC,EAAK,EAAI,MALb,EASTC,mBAASjB,EAAMkB,aATN,mBAS1BC,EAT0B,KASpBC,EAToB,KAoBjC,OATAC,qBAAU,WACTD,EAAQpB,EAAMkB,eACZ,CAAClB,IAEJqB,qBAAU,WACTC,QAAQC,IAAI,wBACZD,QAAQC,IAAIJ,KACV,CAACA,IAIH,kBAAClB,EAAA,EAAD,KACC,kBAACuB,EAAA,EAAD,CAEEC,MAAM,MAENC,QAAS,WACR,IAAMC,EAAMlB,EAAU,YAAIU,GAAO,QACjCG,QAAQC,IAAII,GACZP,EAAQO,MAMX,kBAACH,EAAA,EAAD,CAEEC,MAAM,SAENC,QAAS,WACR,IAAMC,EAAMlB,EAAU,YAAIU,GAAO,UACjCG,QAAQC,IAAII,GACZP,EAAQO,MAMVR,EAAKS,OAAS,EACNT,EAAKU,KAAI,SAAAC,GAAE,OAAE,kBAAC,EAAD,CAAgBnB,IAAKmB,EAAGC,GAAI1B,KAAMyB,OAC9C,gEC9CPE,EAAS,SAAChC,GAAD,OACb,kBAACC,EAAA,EAAD,eACEgC,IAAI,SACJC,UAAU,MACVC,MAAM,SACNC,QAAQ,UACRC,WAAW,UACXC,IAAK,CAAEC,SAAU,QAASC,WAAY,UACtCC,UAAU,UACNzC,KAiDO0C,EA7CH,WAAO,IAAD,EAEoBzB,mBAAS,IAF7B,mBAEXC,EAFW,KAEEyB,EAFF,KAIZC,EAAW,uCACbC,EAAY,wEALE,4CAOhB,4BAAAhC,EAAA,sEACoBiC,IAAMF,EAAWC,GADrC,OACQE,EADR,OAEEJ,EAAeI,EAAI1C,MAFrB,4CAPgB,sBAYhBgB,qBAAU,YAZM,mCAad2B,KACC,IAYH,OACE,kBAACC,EAAA,EAAD,CAASC,MAXC,CACZC,OAAQ,CACNC,KAAM,CACJC,OAAQ,SACRC,KAAM,OACNC,OAAQ,WAOV,kBAACtD,EAAA,EAAD,CAAKkC,MAAM,UACX,kBAAC,EAAD,KACI,kBAACjC,EAAA,EAAD,CAAYC,QAAQ,KAAKqD,UAAU,KAAKpD,cAAY,GAApD,QAGA,kBAACH,EAAA,EAAD,CAAKiC,UAAU,OACb,kBAACV,EAAA,EAAD,CAAQiC,MAAM,UAAUhC,MAAM,cAMlC,kBAAC,EAAD,CAAgBP,YAAaA,MCnDfwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCFNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3307e66f.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Typography } from '@material-ui/core';\n\nimport { Box } from 'grommet';\n\nconst RestaurantCard = (props) => {\n\treturn(\n\t\t\n\t\t<Box>\n\n\t\t\t\t\t<Typography variant=\"body1\" gutterBottom>\n\t\t\t\t\t\t{props.data.name}\n\t\t\t\t\t</Typography>\n\t\t\t\t\t<p>{props.data.rating}</p>\n\t\t</Box>\n\t)\n}\n\nexport default RestaurantCard;","import React, { useState, useEffect } from 'react';\nimport RestaurantCard from '../RestaurantCard';\n\nimport { Box, Button } from 'grommet';\n\nconst RestaurantList = (props) => {\n\n\tconst sortByKey = (array, key) => {\n\t    return array.sort(function(a, b) {\n\t        const x = a[key]; const y = b[key];\n\t        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n\t    });\n\t}\n\n\tconst [list, setList] = useState(props.restaurants);\n\n\tuseEffect(()=>{\n\t\tsetList(props.restaurants)\n\t}, [props]);\n\n\tuseEffect(() => {\n\t\tconsole.log('hello from useEffect')\n\t\tconsole.log(list)\n\t}, [list]);\n\n\treturn(\n\n\t\t<Box>\n\t\t\t<Button\n\n\t\t\t  label=\"A-Z\"\n\n\t\t\t  onClick={() => {\n\t\t\t  \tconst arr = sortByKey([...list], \"name\")\n\t\t\t  \tconsole.log(arr)\n\t\t\t  \tsetList(arr)\n\t\t\t  }}\n\n\t\t\t/>\n\n\n\t\t\t<Button\n\n\t\t\t  label=\"Rating\"\n\n\t\t\t  onClick={() => {\n\t\t\t  \tconst arr = sortByKey([...list], \"rating\")\n\t\t  \t\tconsole.log(arr)\n\t\t\t  \tsetList(arr)\n\n\t\t\t  }}\n\n\t\t\t/>\n\n\t\t\t{list.length > 0 ? (\n            list.map(el=><RestaurantCard key={el.id} data={el}/>)) : (\n            \t<p>No hay resultados para mostrar.</p>)}\n\n\t\t</Box>\n\t)\n}\n\nexport default RestaurantList;","import React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\n\nimport Typography from '@material-ui/core/Typography';\nimport 'typeface-roboto';\n\nimport { Grommet, Box, Button } from 'grommet';\n\nimport RestaurantList from './RestaurantList'\n\nconst AppBar = (props) => (\n  <Box\n    tag='header'\n    direction='row'\n    align='center'\n    justify='between'\n    background='light-2'\n    pad={{ vertical: 'small', horizontal: 'medium' }}\n    elevation='medium'\n    {...props}\n  />\n);\n\nconst App = () => {\n\nconst [restaurants, setRestaurants] = useState([]);\n\nconst proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n    targetUrl = 'https://recruiting-datasets.s3.us-east-2.amazonaws.com/data_melp.json'\n\n  async function fetchData() {\n    const res = await axios(proxyUrl + targetUrl);\n    setRestaurants(res.data)\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);  \n\nconst theme = {\n  global: {\n    font: {\n      family: 'Roboto',\n      size: '14px',\n      height: '20px',\n    },\n  },\n}\n\n  return (\n    <Grommet theme={theme}>\n    <Box align=\"center\">\n    <AppBar>\n        <Typography variant=\"h1\" component=\"h2\" gutterBottom>\n          Melp\n        </Typography>\n        <Box direction='row'>\n          <Button color=\"primary\" label='Github' />\n        </Box>\n    </AppBar>\n      </Box>  \n\n\n      <RestaurantList restaurants={restaurants} />\n      </Grommet>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n// import { Illustration, Shape } from 'react-zdog'\n\n\n// ReactDOM.render(\n//   <Illustration>\n//     <Shape stroke={20} color=\"lightblue\"  />\n//   </Illustration>,\n//   document.getElementById('logo')\n// )\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}