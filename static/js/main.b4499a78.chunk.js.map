{"version":3,"sources":["Rating/index.js","Contact/index.js","Address/index.js","RestaurantCard/index.js","RestaurantList/index.js","App.js","serviceWorker.js","index.js"],"names":["Rating","props","Box","direction","rating","Star","Contact","Mail","contact","email","Phone","phone","Domain","site","Address","data","street","city","state","RestaurantCard","border","color","size","Typography","variant","gutterBottom","name","address","RestaurantList","sortByKey","array","key","order","sort","a","b","x","y","useState","restaurants","list","setList","name_asc","setNameAsc","rating_asc","setRatingAsc","useEffect","console","log","basis","Ascend","Descend","Button","label","onClick","arr","length","map","el","id","AppBar","tag","align","justify","background","pad","vertical","horizontal","elevation","App","setRestaurants","proxyUrl","targetUrl","axios","res","fetchData","Grommet","theme","global","font","family","height","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b4499a78.chunk.js","sourcesContent":["import React from 'react';\n\nimport {Box} from 'grommet';\n\nimport {Star} from 'grommet-icons'\n\nconst Rating = (props) => {\n\treturn(\n\t\t\n\t\t<Box direction=\"column\">\n\t\t\t<Box direction=\"row\">\n\t\t\t\t\t<p>{props.rating} / 5 </p>\n\t\t\t\t\t<Star />\n\t\t\t</Box>\n\t\t</Box>\n\t)\n}\n\nexport default Rating;","import React from 'react';\n\nimport {Box} from 'grommet';\n\nimport { Domain, Mail, Phone} from 'grommet-icons'\n\nconst Contact = (props) => {\n\treturn(\n\t\t<Box direction=\"column\">\n\t\t<Box direction=\"row\">\n\t\t\t<Mail />\n\n\t\t\t{props.contact.email}\n</Box><Box direction=\"row\">\n\t\t\t<Phone />\n\n\t\t\t{props.contact.phone}\n</Box><Box direction=\"row\">\n\t\t\t<Domain />\n\n\t\t\t{props.contact.site}\n\t\t</Box></Box>\n\t)\n}\n\nexport default Contact;","import React from 'react';\n\nimport {Box} from 'grommet';\n\nconst Address = (props) => {\n\treturn(\n\t\t\n\t\t<Box direction=\"row\">\n\t\t\t{props.data.street}\n\t\t\t<br />\n\t\t\t{props.data.city},&nbsp;\n\t\t\t{props.data.state}\n\t\t</Box>\n\t)\n}\n\nexport default Address;","import React from 'react';\n\nimport { Typography } from '@material-ui/core';\n\nimport { Box } from 'grommet';\n\nimport Rating from '../Rating'\nimport Contact from '../Contact'\nimport Address from '../Address'\n\nconst RestaurantCard = (props) => {\n\treturn(\n\t\t\n\t\t<Box direction=\"row\" border={{ color: 'brand', size: 'large' }}>\n\n\t\t\t<Box direction=\"column\">\n\t\t\t\t\t\t<Typography variant=\"body1\" gutterBottom>\n\t\t\t\t\t\t\t{props.data.name}\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t<Rating rating={props.data.rating} />\n\t\t\t</Box>\n\n\n\t\t\t<Box direction=\"column\">\n\n\t\t\t\t\t<Contact contact={props.data.contact} />\n\n\t\t\t\t\t<Address data={props.data.address} />\n\t\t\t</Box>\n\t\t</Box>\n\t)\n}\n\nexport default RestaurantCard;","import React, { useState, useEffect } from 'react';\nimport RestaurantCard from '../RestaurantCard';\n\nimport { Box, Button } from 'grommet';\nimport { Ascend, Descend } from 'grommet-icons';\n\nconst RestaurantList = (props) => {\n\n\tconst sortByKey = (array, key, order) => {\n\t    return array.sort((a, b) => {\n\t        const x = a[key]; const y = b[key];\n\t        if (order)\n\t        \treturn ((x < y) ? -1 : ((x > y) ? 1 : 0));\n\t    \telse\n\t    \t\treturn ((x > y) ? -1 : ((x < y) ? 1 : 0));\n\t    });\n\t}\n\n\tconst [list, setList] = useState(props.restaurants);\n\tconst [name_asc, setNameAsc] = useState(true);\n\tconst [rating_asc, setRatingAsc] = useState(true);\n\n\tuseEffect(()=>{\n\t\tsetList(props.restaurants)\n\t}, [props]);\n\n\tuseEffect(() => {\n\t\tconsole.log('hello from useEffect')\n\t\tconsole.log(list)\n\t}, [list]);\n\n\treturn(\n\n\t\t<Box>\n\n\t\t\t<Box direction=\"column\">\n\t\t\t\t<Box basis=\"1/2\">\n\t\t\t\t{ name_asc ? (<Ascend/>) : (<Descend/>)}\n\t\t\t\t</Box>\n\t\t\t\t<Box basis=\"1/2\">\n\t\t\t\t<Button\n\n\t\t\t\t  label=\"A-Z\"\n\n\t\t\t\t  onClick={() => {\n\t\t\t\t  \tconst arr = sortByKey([...props.restaurants], \"name\", name_asc)\n\t\t\t\t  \tsetNameAsc(!name_asc)\n\t\t\t\t  \tsetList(arr)\n\t\t\t\t  }}\n\n\t\t\t\t/>\n\t\t\t\t</Box>\n\t\t\t</Box>\n\n\t\t\t{ rating_asc ? (<Ascend/>) : (<Descend/>)}\n\n\t\t\t<Button\n\n\t\t\t  label=\"Rating\"\n\n\t\t\t  onClick={() => {\n\t\t\t  \tconst arr = sortByKey([...props.restaurants], \"rating\", rating_asc)\n\t\t\t\tsetRatingAsc(!rating_asc)\n\t\t\t  \tsetList(arr)\n\n\t\t\t  }}\n\n\t\t\t/>\n\n\t\t\t{list.length > 0 ? (\n            list.map(el=><RestaurantCard key={el.id} data={el}/>)) : (\n            \t<p>No hay resultados para mostrar.</p>)}\n\n\t\t</Box>\n\t)\n}\n\nexport default RestaurantList;","import React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\n\nimport Typography from '@material-ui/core/Typography';\nimport 'typeface-roboto';\n\nimport { Grommet, Box, Button } from 'grommet';\n\nimport RestaurantList from './RestaurantList'\n\nconst AppBar = (props) => (\n  <Box\n    tag='header'\n    direction='row'\n    align='center'\n    justify='between'\n    background='light-2'\n    pad={{ vertical: 'small', horizontal: 'medium' }}\n    elevation='medium'\n    {...props}\n  />\n);\n\nconst App = () => {\n\nconst [restaurants, setRestaurants] = useState([]);\n\nconst proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n    targetUrl = 'https://recruiting-datasets.s3.us-east-2.amazonaws.com/data_melp.json'\n\n  async function fetchData() {\n    const res = await axios(proxyUrl + targetUrl);\n    setRestaurants(res.data)\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);  \n\nconst theme = {\n  global: {\n    font: {\n      family: 'Roboto',\n      size: '14px',\n      height: '20px',\n    },\n  },\n}\n\n  return (\n    <Grommet theme={theme}>\n    <Box align=\"center\">\n    <AppBar>\n        <Typography variant=\"h1\" component=\"h2\" gutterBottom>\n          Melp\n        </Typography>\n        <Box direction='row'>\n          <Button color=\"primary\" label='Github' />\n        </Box>\n    </AppBar>\n      </Box>  \n\n\n      <RestaurantList restaurants={restaurants} />\n      </Grommet>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n// import { Illustration, Shape } from 'react-zdog'\n\n\n// ReactDOM.render(\n//   <Illustration>\n//     <Shape stroke={20} color=\"lightblue\"  />\n//   </Illustration>,\n//   document.getElementById('logo')\n// )\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}