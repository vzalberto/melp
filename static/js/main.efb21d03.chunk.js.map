{"version":3,"sources":["Rating/index.js","Contact/index.js","Address/index.js","RestaurantCard/index.js","RestaurantList/index.js","context.js","RestaurantMap/index.js","AverageRatingLabel/index.js","StandardDeviationLabel/index.js","TotalRestaurantsInRadius/index.js","FilterControls/index.js","reducer.js","Melp/index.js","serviceWorker.js","index.js"],"names":["Rating","props","Box","gridArea","align","rating","Contact","direction","Mail","contact","email","Phone","phone","Domain","site","Address","data","street","city","state","RestaurantCard","Grid","background","rows","border","columns","gap","areas","name","start","end","Text","address","RestaurantList","sortByKey","array","key","order","sort","a","b","x","y","useState","restaurants","list","setList","name_asc","setNameAsc","rating_asc","setRatingAsc","useEffect","console","log","pad","justifiy","Button","label","icon","Ascend","Descend","onClick","arr","overflow","InfiniteScroll","items","item","id","Context","createContext","lat","lng","radius","navigationControl","position","top","left","margin","INITIAL_VIEWPORT","latitude","longitude","zoom","RestaurantMap","useContext","dispatch","viewport","setViewport","fill","lngLat","leftButton","type","payload","width","height","mapStyle","mapboxApiAccessToken","onViewportChange","style","AverageRating","size","StandardDeviationLabel","sigma","TotalRestaurantsInRadius","total","FilterControls","TextInput","placeholder","onChange","event","target","value","Reducer","Melp","initialState","useReducer","setRestaurants","avg","setAvg","setSigma","proxyUrl","targetUrl","axios","res","fetchData","sum","m","length","i","Math","pow","parseFloat","sqrt","toFixed","Provider","Grommet","full","theme","global","font","family","Anchor","href","primary","AverageRatingLabel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.efb21d03.chunk.js","sourcesContent":["import React from 'react';\n\nimport {Box} from 'grommet';\n\nconst Rating = (props) => {\n\treturn(\n\t\t\n\t\t<Box gridArea=\"restaurantRating\" align=\"end\">\n\t\t\t\t\t<p>{props.rating} â˜…</p>\n\t\t</Box>\n\t)\n}\n\nexport default Rating;","import React from 'react';\n\nimport { Anchor, Box } from 'grommet';\n\nimport { Domain, Mail, Phone } from 'grommet-icons'\n\nconst Contact = (props) => {\n\treturn(\n\n\t\t<Box \n\t\tgridArea=\"restaurantContact\"\n\t\talign=\"end\"\n\t\t>\n\t\t\t<Box direction=\"row\">\n\t\t\t\t<Mail />\n\n\t\t\t\t{props.contact.email}\n\t\t\t\t\t\n\t\t\t</Box>\n\t\t\t\n\t\t\t<Box direction=\"row\">\n\t\t\t\t<Phone />\n\n\t\t\t\t{props.contact.phone}\n\t\t\t</Box>\n\n\t\t\t<Box direction=\"row\">\n\t\t\t\t<Domain />\n\n\t\t\t\t\n\t\t\t\t\t{props.contact.site}\n\t\t\t\t\n\t\t\t</Box>\n\n\t\t</Box>\n\t)\n}\n\nexport default Contact;","import React from 'react';\n\nimport {Box, Text} from 'grommet';\n\nconst Address = (props) => {\n\treturn(\n\n\t\t<Box gridArea=\"restaurantAddress\">\n\n\t\t\t{props.data.street}\n\t\t\t<br />\n\t\t\t{props.data.city},&nbsp;{props.data.state}\n\t\t\t\n\t\t</Box>\n\t)\n}\n\nexport default Address;","import React from 'react';\n\nimport { Box, Grid, Text } from 'grommet';\n\nimport Rating from '../Rating'\nimport Contact from '../Contact'\nimport Address from '../Address'\n\nconst RestaurantCard = (props) => {\n\treturn(\n\t\t<Grid \n\t\tbackground=\"neutral-1\"\n\t\t\trows={['xsmall', 'small']}\n\t\t\tborder=\"all\"\n\t\t\tcolumns={['xsmall', 'small']}\n\n\t\t\tgap=\"small\"\n\t\t\tareas={[\n\t\t\t\t{name: 'restaurantName', start: [0,0], end: [1,0]},\n\t\t\t\t{name: 'restaurantRating', start: [1,0], end: [2,0]},\n\t\t\t\t{name: 'restaurantAddress', start: [0,1], end: [1,1]},\n\t\t\t\t{name: 'restaurantContact', start: [1,1], end: [2,1]},\n\t\t\t]}\n\t\t>\n\n\t\t\t\t<Box \n\t\t\t\tgridArea=\"restaurantName\" \n\t\t\t\t>\n\t\t\t\t\t\t<Text>{props.data.name}</Text>\n\t\t\t\t</Box>\n\n\t\t\t\t<Address data={props.data.address} />\n\t\t\t\n\t\t\t\t<Rating rating={props.data.rating} />\n\n\t\t\t\t<Contact contact={props.data.contact} />\n\n\t\t</Grid>\n\t)\n}\n\nexport default RestaurantCard;","import React, { useState, useEffect } from 'react';\n\nimport RestaurantCard from '../RestaurantCard';\n\nimport { Box, Button, InfiniteScroll } from 'grommet';\nimport { Ascend, Descend } from 'grommet-icons';\n\nconst RestaurantList = (props) => {\n\n\tconst sortByKey = (array, key, order) => {\n\t    return array.sort((a, b) => {\n\t        const x = a[key]; const y = b[key];\n\t        if (order)\n\t        \treturn ((x < y) ? -1 : ((x > y) ? 1 : 0));\n\t    \telse\n\t    \t\treturn ((x > y) ? -1 : ((x < y) ? 1 : 0));\n\t    });\n\t}\n\n\tconst [list, setList] = useState(props.restaurants);\n\n\tconst [name_asc, setNameAsc] = useState(true);\n\tconst [rating_asc, setRatingAsc] = useState(true);\n\n\tuseEffect(()=>{\n\t\tsetList(props.restaurants)\n\t}, [props]);\n\n\tuseEffect(() => {\n\t\tconsole.log('hello from useEffect')\n\t\tconsole.log(list)\n\t}, [list]);\n\n\treturn(\n\t\t<Box direction=\"column\" gap=\"xlarge\" >\n\t\t\t<Box direction=\"row\" gap=\"medium\" pad=\"large\" justifiy=\"center\"> \n\t\t\t\t<Box>\n\t\t\t\t\t<Button\n\t\t\t\t\t  \tlabel=\"A-Z\"\n\t\t\t\t\t  \ticon={ name_asc ? (<Ascend/>) : (<Descend/>)}\n\n\t\t\t\t\t  onClick={() => {\n\t\t\t\t\t  \tconst arr = sortByKey([...props.restaurants], \"name\", name_asc);\n\t\t\t\t\t  \tsetNameAsc(!name_asc);\n\t\t\t\t\t  \tsetList(arr);\n\t\t\t\t\t  }}\n\n\t\t\t\t\t/>\n\t\t\t\t</Box>\n\n\t\t\t\t<Box>\n\t\t\t\t\t<Button\n\t\t\t\t\t  \tlabel=\"Rating\"\n\t\t\t\t\t  \ticon={ rating_asc ? (<Ascend/>) : (<Descend/>)}\n\n\t\t\t\t\t  onClick={() => {\n\t\t\t\t\t  \tconst arr = sortByKey([...props.restaurants], \"rating\", rating_asc)\n\t\t\t\t\t\tsetRatingAsc(!rating_asc)\n\t\t\t\t\t  \tsetList(arr)\n\n\t\t\t\t\t  }}\n\n\t\t\t\t\t/>\n\n\t\t\t\t</Box>\n\t\t\t</Box>\n\t\t\t\n\t\t\t<Box overflow=\"auto\" pad=\"small\" direction=\"column\">\n\t\t\t\t<InfiniteScroll items={list}>\n\t\t\t\t{((item, key)=>(<RestaurantCard data={item} key={item.id}/>))}\n\t\t\t\t</InfiniteScroll>\n\t\t\t</Box>\n\n\t\t</Box>\n\t)\n}\n\nexport default RestaurantList;","import { createContext } from 'react';\n\nconst Context = createContext({\n\tlat: 19.4183786,\n\tlng: -99.189842,\n\tradius: 7000,\n})\n\nexport default Context;","import React, { useContext, useState } from 'react'\nimport ReactMapGL, { NavigationControl } from 'react-map-gl'\n\nimport 'mapbox-gl/dist/mapbox-gl.css'\n\nimport {Box} from 'grommet'\n\nimport Context from '../context'\n\nconst navigationControl = {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    margin: \"1em\"\n  }\n\nconst INITIAL_VIEWPORT = {\n\tlatitude: 19.4183786,\n\tlongitude: -99.189842,\n\tzoom: 15\n}\nconst RestaurantMap = () => {\n\tconst {state, dispatch} = useContext(Context);\n\tconst [viewport, setViewport] = useState(INITIAL_VIEWPORT);\n\n\n\tconst handleMapClick = ({lngLat, leftButton}) => {\n\t\tif(!leftButton) return;\n\t\tconst [lng, lat] = lngLat;\n\n\t\tdispatch ({type: \"UPDATE_LONGITUDE\" , payload: lng})\n\n\t\tdispatch ({type: \"UPDATE_LATITUDE\", payload: lat})\n\t}\n\n\treturn (\n\t\t<Box pad=\"small\" fill>\n\t\t\t<ReactMapGL \n\t\t\t\tonClick={handleMapClick}\n\t\t\t\twidth=\"100vw\"\n\t\t\t\theight=\"100vh\"\n\t\t\t\tmapStyle=\"mapbox://styles/mapbox/satellite-v9\"\n\t\t\t\t{...viewport}\n\t\t\t\tmapboxApiAccessToken = \"pk.eyJ1IjoidnphbGJlcnRvIiwiYSI6ImNrMjllZzNjdTFtZXMzZXRjaHJ6Z2NlNW4ifQ.0DS64cOS3tH51tPaajudew\"\n\t\t\t\tonViewportChange={(viewport)=>setViewport(viewport)}\n\t\t\t>\n\t\t\t<div style={navigationControl}>\n\t\t\t<NavigationControl onViewportChange={(viewport)=>setViewport(viewport)} />\n\t\t\t</div>\n\t\t\t</ReactMapGL>\n\t\t</Box>\n\t);\n}\n\nexport default RestaurantMap;","import React from 'react';\n\nimport { Box, Text } from 'grommet';\n\nconst AverageRating = (props) => {\n\treturn(\n\n\t\t    <Box pad=\"medium\" background=\"brand\">\n\t\t      <Text size=\"large\">Average rating: {props.data}</Text>\n\t\t    </Box>\n\n\t)\n}\n\nexport default AverageRating;","import React from 'react';\n\nimport { Box, Text } from 'grommet';\n\nconst StandardDeviationLabel = (props) => {\n\treturn(\n\n\t\t    <Box pad=\"medium\" background=\"brand\">\n\t\t      <Text size=\"large\">Sigma: {props.sigma}</Text>\n\t\t    </Box>\n\n\t)\n}\n\nexport default StandardDeviationLabel;","import React from 'react';\n\nimport { Box, Text } from 'grommet';\n\nconst TotalRestaurantsInRadius = (props) => {\n\treturn(\n\n\t\t    <Box pad=\"medium\" background=\"brand\">\n\t\t      <Text size=\"large\">Total restaurants in radius: {props.total}</Text>\n\t\t    </Box>\n\n\t)\n}\n\nexport default TotalRestaurantsInRadius;","import React, {useContext} from 'react'\nimport { Box, TextInput } from 'grommet'\n\nimport Context from '../context'\n\n\nconst FilterControls = () => {\n\n\tconst {state} = useContext(Context)\n\tconst {dispatch} = useContext(Context);\n\n\tconst latUpdate = (event)=>{dispatch ({type: \"UPDATE_LATITUDE\", payload: event.target.value})}\n\tconst lngUpdate = (event)=>{dispatch ({type: \"UPDATE_LONGITUDE\", payload: event.target.value})}\n\tconst radiusUpdate = (event)=>{dispatch ({type: \"UPDATE_RADIUS\", payload: event.target.value})}\n\n\treturn (\n\t\t<div>\n\t\t<TextInput \n\t\t\tplaceholder={`latitude: ${state.lat}`}\n\t\t\tonChange={latUpdate}\n\t\t/>\n\t\t<TextInput \n\t\t\tplaceholder={`latitude: ${state.lng}`}\n\t\t\tonChange={lngUpdate}\n\t\t/>\n\t\t<TextInput \n\t\t\tplaceholder={`radius: ${state.radius}`}\n\t\t\tonChange={radiusUpdate}\n\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default FilterControls;","export default function Reducer(state, { type, payload }){\n\tswitch(type){\n\n\t\tcase \"UPDATE_LATITUDE\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tlat: payload\n\t\t\t}\n\n\t\tcase \"UPDATE_LONGITUDE\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tlng: payload\n\t\t\t}\n\n\t\tcase \"UPDATE_RADIUS\":\n\n\t\t\treturn{\n\t\t\t\t...state,\n\t\t\t\tradius: payload\n\t\t\t}\n\n\t\tdefault: \n\t\t\treturn state;\n\t}\n}","import React, { useState, useEffect, useContext, useReducer } from \"react\";\nimport axios from 'axios';\n\nimport Typography from '@material-ui/core/Typography';\nimport 'typeface-roboto';\n\nimport { Anchor, Grid, Grommet, Box, Text } from 'grommet';\n\nimport RestaurantList from '../RestaurantList'\n\nimport RestaurantMap from '../RestaurantMap'\n\nimport RatingDistributionChart from '../RatingDistributionChart'\nimport AverageRatingLabel from '../AverageRatingLabel'\nimport StandardDeviationLabel from '../StandardDeviationLabel'\nimport TotalRestaurantsInRadius from '../TotalRestaurantsInRadius'\nimport FilterControls from '../FilterControls'\nimport Context from '../context'\nimport Reducer from '../reducer'\n\n//This function takes in latitude and longitude of two location and returns the distance between them as the crow flies (in km)\nfunction calcCrow(coords1, coords2)\n{\n  // var R = 6.371; // km\n  var R = 6371000;\n  var dLat = toRad(coords2.lat-coords1.lat);\n  var dLon = toRad(coords2.lng-coords1.lng);\n  var lat1 = toRad(coords1.lat);\n  var lat2 = toRad(coords2.lat);\n\n  var a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2); \n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \n  var d = R * c;\n  return d;\n}\n\n// Converts numeric degrees to radians\nfunction toRad(Value)\n{\n    return Value * Math.PI / 180;\n}\n\nconst Melp = () => {\nconst initialState = useContext(Context);\nconst [state, dispatch] = useReducer(Reducer, initialState);\n\nconst [restaurants, setRestaurants] = useState([]);\nconst [avg, setAvg] = useState(0);\nconst [sigma, setSigma] = useState(0);\n\nconst proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n    targetUrl = 'https://recruiting-datasets.s3.us-east-2.amazonaws.com/data_melp.json'\n\n  async function fetchData() {\n    const res = await axios(proxyUrl + targetUrl);\n\n\n\n    //setRestaurants(res.data.filter(el=>calcCrow(el.address.location, {lat: state.lat, lng: state.lng}) <= state.radius))\n    setRestaurants(res.data)\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  //This hook calculates the average of current restaurants\n  useEffect(()=>{\n    let sum = 0;\n    const m = restaurants.length\n\n    for (let i = restaurants.length - 1; i >= 0; i--) {\n      sum += restaurants[i].rating \n    }\n\n    setAvg(sum/m)\n\n  }, [restaurants])\n\n  //This handles std deviation, depends on the average being calculated first.\n  useEffect(()=>{\n    let sum = 0;\n    const m = restaurants.length\n\n    for (let i = restaurants.length - 1; i >= 0; i--) {\n      sum += Math.pow((parseFloat(restaurants[i].rating) - parseFloat(avg)), 2)\n    }\n\n    console.log(sum)\n\n    setSigma(Math.sqrt(sum/(m-1)).toFixed(3))\n  }, [avg])\n\n  const theme = {\n    global: {\n      font: {\n        family: 'Inconsolata',\n        size: '14px',\n        height: '20px',\n      },\n    },\n  }\n\n  return (\n    <Context.Provider value={{state, dispatch}} >\n      <Grommet full theme={theme}>\n        <Grid\n          rows={['xxsmall', 'large']}\n          columns={['1/3', '2/3']}\n          gap=\"small\"\n          areas={[\n            { name: 'header', start: [0, 0], end: [1, 0] },\n            { name: 'nav', start: [0, 1], end: [0, 1] },\n            { name: 'main', start: [1, 1], end: [1, 1] },\n          ]}\n    >\n      <Box gridArea=\"header\" background=\"brand\">\n        <Text>Melp</Text>\n        <Anchor href=\"https://github.com/vzalberto/melp\" primary label=\"View on Github\" target=\"_blank\" />\n      </Box>\n\n      <Box gridArea=\"nav\">\n        <RestaurantList restaurants={restaurants} />\n      </Box>\n\n      <Box gridArea=\"main\" background=\"light-2\">\n\n          <FilterControls />\n          <TotalRestaurantsInRadius total={restaurants.length}/>\n          <AverageRatingLabel data={avg}/>\n          <StandardDeviationLabel sigma={sigma}/>\n          <RestaurantMap />\n\n      </Box>\n    </Grid>  \n\n      </Grommet>\n    </Context.Provider>\n  );\n}\n\nexport default Melp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Melp from './Melp/';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Melp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}