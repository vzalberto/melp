{"version":3,"sources":["Rating/index.js","Contact/index.js","Address/index.js","RestaurantCard/index.js","RestaurantList/index.js","Melp/index.js","serviceWorker.js","index.js"],"names":["Rating","props","Box","gridArea","rating","Contact","direction","Mail","contact","email","Phone","phone","Domain","site","Address","data","street","city","state","RestaurantCard","Grid","rows","border","columns","gap","areas","name","start","end","address","RestaurantList","sortByKey","array","key","order","sort","a","b","x","y","useState","restaurants","list","setList","name_asc","setNameAsc","rating_asc","setRatingAsc","useEffect","console","log","pad","justifiy","Button","label","icon","Ascend","Descend","onClick","arr","overflow","InfiniteScroll","items","item","id","Melp","setRestaurants","proxyUrl","targetUrl","axios","res","fetchData","Grommet","full","theme","global","font","family","size","height","background","Text","Anchor","href","primary","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3ac4068.chunk.js","sourcesContent":["import React from 'react';\n\nimport {Box} from 'grommet';\n\nconst Rating = (props) => {\n\treturn(\n\t\t\n\t\t<Box gridArea=\"restaurantRating\">\n\t\t\t\t\t<p>{props.rating + 1} / 5 </p>\n\t\t</Box>\n\t)\n}\n\nexport default Rating;","import React from 'react';\n\nimport { Anchor, Box } from 'grommet';\n\nimport { Domain, Mail, Phone } from 'grommet-icons'\n\nconst Contact = (props) => {\n\treturn(\n\n\t\t<Box gridArea=\"restaurantContact\">\n\t\t\t<Box direction=\"row\">\n\t\t\t\t<Mail />\n\n\t\t\t\t{props.contact.email}\n\t\t\t\t\t\n\t\t\t</Box>\n\t\t\t\n\t\t\t<Box direction=\"row\">\n\t\t\t\t<Phone />\n\n\t\t\t\t{props.contact.phone}\n\t\t\t</Box>\n\n\t\t\t<Box direction=\"row\">\n\t\t\t\t<Domain />\n\n\t\t\t\t\n\t\t\t\t\t{props.contact.site}\n\t\t\t\t\n\t\t\t</Box>\n\n\t\t</Box>\n\t)\n}\n\nexport default Contact;","import React from 'react';\n\nimport {Box, Text} from 'grommet';\n\nconst Address = (props) => {\n\treturn(\n\n\t\t<Box gridArea=\"restaurantAddress\">\n\n\t\t\t{props.data.street}\n\t\t\t<br />\n\t\t\t{props.data.city},&nbsp;{props.data.state}\n\t\t\t\n\t\t</Box>\n\t)\n}\n\nexport default Address;","import React from 'react';\n\nimport { Box, Grid, Text } from 'grommet';\n\nimport Rating from '../Rating'\nimport Contact from '../Contact'\nimport Address from '../Address'\n\nconst RestaurantCard = (props) => {\n\treturn(\n\t\t<Grid \n\t\t\trows={['xsmall', 'small']}\n\t\t\tborder=\"all\"\n\t\t\tcolumns={['xsmall', 'small']}\n\n\t\t\tgap=\"small\"\n\t\t\tareas={[\n\t\t\t\t{name: 'restaurantName', start: [0,0], end: [1,0]},\n\t\t\t\t{name: 'restaurantRating', start: [1,0], end: [2,0]},\n\t\t\t\t{name: 'restaurantAddress', start: [0,1], end: [1,1]},\n\t\t\t\t{name: 'restaurantContact', start: [1,1], end: [2,1]},\n\t\t\t]}\n\t\t>\n\n\t\t\t\t<Box gridArea=\"restaurantName\">\n\t\t\t\t\t\t{props.data.name}\n\t\t\t\t</Box>\n\n\t\t\t\t<Address data={props.data.address} />\n\t\t\t\n\t\t\t\t<Rating rating={props.data.rating} />\n\n\t\t\t\t<Contact contact={props.data.contact} />\n\n\t\t</Grid>\n\t)\n}\n\nexport default RestaurantCard;","import React, { useState, useEffect } from 'react';\n\nimport RestaurantCard from '../RestaurantCard';\n\nimport { Box, Button, InfiniteScroll } from 'grommet';\nimport { Ascend, Descend } from 'grommet-icons';\n\nconst RestaurantList = (props) => {\n\n\tconst sortByKey = (array, key, order) => {\n\t    return array.sort((a, b) => {\n\t        const x = a[key]; const y = b[key];\n\t        if (order)\n\t        \treturn ((x < y) ? -1 : ((x > y) ? 1 : 0));\n\t    \telse\n\t    \t\treturn ((x > y) ? -1 : ((x < y) ? 1 : 0));\n\t    });\n\t}\n\n\tconst [list, setList] = useState(props.restaurants);\n\n\tconst [name_asc, setNameAsc] = useState(true);\n\tconst [rating_asc, setRatingAsc] = useState(true);\n\n\tuseEffect(()=>{\n\t\tsetList(props.restaurants)\n\t}, [props]);\n\n\tuseEffect(() => {\n\t\tconsole.log('hello from useEffect')\n\t\tconsole.log(list)\n\t}, [list]);\n\n\treturn(\n\t\t<Box direction=\"column\" gap=\"xlarge\" >\n\t\t\t<Box direction=\"row\" gap=\"medium\" pad=\"large\" justifiy=\"center\"> \n\t\t\t\t<Box>\n\t\t\t\t\t<Button\n\t\t\t\t\t  \tlabel=\"A-Z\"\n\t\t\t\t\t  \ticon={ name_asc ? (<Ascend/>) : (<Descend/>)}\n\n\t\t\t\t\t  onClick={() => {\n\t\t\t\t\t  \tconst arr = sortByKey([...props.restaurants], \"name\", name_asc);\n\t\t\t\t\t  \tsetNameAsc(!name_asc);\n\t\t\t\t\t  \tsetList(arr);\n\t\t\t\t\t  }}\n\n\t\t\t\t\t/>\n\t\t\t\t</Box>\n\n\t\t\t\t<Box>\n\t\t\t\t\t<Button\n\t\t\t\t\t  \tlabel=\"Rating\"\n\t\t\t\t\t  \ticon={ rating_asc ? (<Ascend/>) : (<Descend/>)}\n\n\t\t\t\t\t  onClick={() => {\n\t\t\t\t\t  \tconst arr = sortByKey([...props.restaurants], \"rating\", rating_asc)\n\t\t\t\t\t\tsetRatingAsc(!rating_asc)\n\t\t\t\t\t  \tsetList(arr)\n\n\t\t\t\t\t  }}\n\n\t\t\t\t\t/>\n\n\t\t\t\t</Box>\n\t\t\t</Box>\n\t\t\t\n\t\t\t<Box overflow=\"auto\" pad=\"small\" direction=\"column\">\n\t\t\t\t<InfiniteScroll items={list}>\n\t\t\t\t{((item, key)=>(<RestaurantCard data={item} key={item.id}/>))}\n\t\t\t\t</InfiniteScroll>\n\t\t\t</Box>\n\n\t\t</Box>\n\t)\n}\n\nexport default RestaurantList;","import React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\n\nimport Typography from '@material-ui/core/Typography';\nimport 'typeface-roboto';\n\nimport { Anchor, Grid, Grommet, Box, Text } from 'grommet';\n\nimport RestaurantList from '../RestaurantList'\n\nconst Melp = () => {\n\nconst [restaurants, setRestaurants] = useState([]);\n\nconst proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n    targetUrl = 'https://recruiting-datasets.s3.us-east-2.amazonaws.com/data_melp.json'\n\n  async function fetchData() {\n    const res = await axios(proxyUrl + targetUrl);\n    setRestaurants(res.data)\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);  \n\n  const theme = {\n    global: {\n      font: {\n        family: 'Inconsolata',\n        size: '14px',\n        height: '20px',\n      },\n    },\n  }\n\n  return (\n\n    <Grommet full theme={theme}>\n      <Grid\n        rows={['xxsmall', 'large']}\n        columns={['1/3', '2/3']}\n        gap=\"small\"\n        areas={[\n          { name: 'header', start: [0, 0], end: [1, 0] },\n          { name: 'nav', start: [0, 1], end: [0, 1] },\n          { name: 'main', start: [1, 1], end: [1, 1] },\n        ]}\n  >\n    <Box gridArea=\"header\" background=\"brand\">\n      <Text>Melp</Text>\n      <Anchor href=\"https://github.com/vzalberto/melp\" primary label=\"View on Github\" target=\"_blank\" />\n    </Box>\n\n    <Box gridArea=\"nav\">\n      <RestaurantList restaurants={restaurants} />\n    </Box>\n\n    <Box gridArea=\"main\" background=\"light-2\">\n      <Text>mapa</Text>\n    </Box>\n  </Grid>  \n\n    </Grommet>\n  );\n}\n\nexport default Melp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Melp from './Melp/';\nimport * as serviceWorker from './serviceWorker';\n\n\n// import { Illustration, Shape } from 'react-zdog'\n\n\n// ReactDOM.render(\n//   <Illustration>\n//     <Shape stroke={20} color=\"lightblue\"  />\n//   </Illustration>,\n//   document.getElementById('logo')\n// )\n\nReactDOM.render(<Melp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}